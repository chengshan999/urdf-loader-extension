{"version":3,"file":"urdf-viewer-element.js","sources":["../src/urdf-viewer-element.js"],"sourcesContent":["import * as THREE from 'three';\nimport { MeshPhongMaterial } from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport URDFLoader from './URDFLoader.js';\n\nconst tempVec2 = new THREE.Vector2();\nconst emptyRaycast = () => {};\n\n// urdf-viewer element\n// Loads and displays a 3D view of a URDF-formatted robot\n\n// Events\n// urdf-change: Fires when the URDF has finished loading and getting processed\n// urdf-processed: Fires when the URDF has finished loading and getting processed\n// geometry-loaded: Fires when all the geometry has been fully loaded\n// ignore-limits-change: Fires when the 'ignore-limits' attribute changes\n// angle-change: Fires when an angle changes\nexport default\nclass URDFViewer extends HTMLElement {\n\n    static get observedAttributes() {\n\n        return ['package', 'urdf', 'up', 'display-shadow', 'ambient-color', 'ignore-limits', 'show-collision'];\n\n    }\n\n    get package() { return this.getAttribute('package') || ''; }\n    set package(val) { this.setAttribute('package', val); }\n\n    get urdf() { return this.getAttribute('urdf') || ''; }\n    set urdf(val) { this.setAttribute('urdf', val); }\n\n    get ignoreLimits() { return this.hasAttribute('ignore-limits') || false; }\n    set ignoreLimits(val) { val ? this.setAttribute('ignore-limits', val) : this.removeAttribute('ignore-limits'); }\n\n    get up() { return this.getAttribute('up') || '+Z'; }\n    set up(val) { this.setAttribute('up', val); }\n\n    get displayShadow() { return this.hasAttribute('display-shadow') || false; }\n    set displayShadow(val) { val ? this.setAttribute('display-shadow', '') : this.removeAttribute('display-shadow'); }\n\n    get ambientColor() { return this.getAttribute('ambient-color') || '#8ea0a8'; }\n    set ambientColor(val) { val ? this.setAttribute('ambient-color', val) : this.removeAttribute('ambient-color'); }\n\n    get autoRedraw() { return this.hasAttribute('auto-redraw') || false; }\n    set autoRedraw(val) { val ? this.setAttribute('auto-redraw', true) : this.removeAttribute('auto-redraw'); }\n\n    get noAutoRecenter() { return this.hasAttribute('no-auto-recenter') || false; }\n    set noAutoRecenter(val) { val ? this.setAttribute('no-auto-recenter', true) : this.removeAttribute('no-auto-recenter'); }\n\n    get showCollision() { return this.hasAttribute('show-collision') || false; }\n    set showCollision(val) { val ? this.setAttribute('show-collision', true) : this.removeAttribute('show-collision'); }\n\n    get jointValues() {\n\n        const values = {};\n        if (this.robot) {\n\n            for (const name in this.robot.joints) {\n\n                const joint = this.robot.joints[name];\n                values[name] = joint.jointValue.length === 1 ? joint.angle : [...joint.jointValue];\n\n            }\n\n        }\n\n        return values;\n\n    }\n    set jointValues(val) { this.setJointValues(val); }\n\n    get angles() {\n\n        return this.jointValues;\n\n    }\n    set angles(v) {\n\n        this.jointValues = v;\n\n    }\n\n    /* Lifecycle Functions */\n    constructor() {\n\n        super();\n\n        this._requestId = 0;\n        this._dirty = false;\n        this._loadScheduled = false;\n        this.robot = null;\n        this.loadMeshFunc = null;\n        this.urlModifierFunc = null;\n\n        // Scene setup\n        const scene = new THREE.Scene();\n\n        const ambientLight = new THREE.HemisphereLight(this.ambientColor, '#000');\n        ambientLight.groundColor.lerp(ambientLight.color, 0.5 * Math.PI);\n        ambientLight.intensity = 0.5;\n        ambientLight.position.set(0, 1, 0);\n        scene.add(ambientLight);\n\n        // Light setup\n        const dirLight = new THREE.DirectionalLight(0xffffff, Math.PI);\n        dirLight.position.set(4, 10, 1);\n        dirLight.shadow.mapSize.width = 2048;\n        dirLight.shadow.mapSize.height = 2048;\n        dirLight.shadow.normalBias = 0.001;\n        dirLight.castShadow = true;\n        scene.add(dirLight);\n        scene.add(dirLight.target);\n\n        // Renderer setup\n        const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });\n        renderer.setClearColor(0xffffff);\n        renderer.setClearAlpha(0);\n        renderer.shadowMap.enabled = true;\n        renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n        renderer.outputColorSpace = THREE.SRGBColorSpace;\n\n        // Camera setup\n        const camera = new THREE.PerspectiveCamera(75, 1, 0.1, 1000);\n        camera.position.z = -10;\n\n        // World setup\n        const world = new THREE.Object3D();\n        scene.add(world);\n\n        const plane = new THREE.Mesh(\n            new THREE.PlaneGeometry(40, 40),\n            new THREE.ShadowMaterial({ side: THREE.DoubleSide, transparent: true, opacity: 0.25 }),\n        );\n        plane.rotation.x = -Math.PI / 2;\n        plane.position.y = -0.5;\n        plane.receiveShadow = true;\n        plane.scale.set(10, 10, 10);\n        scene.add(plane);\n\n        // Controls setup\n        const controls = new OrbitControls(camera, renderer.domElement);\n        controls.rotateSpeed = 2.0;\n        controls.zoomSpeed = 5;\n        controls.panSpeed = 2;\n        controls.enableZoom = true;\n        controls.enableDamping = false;\n        controls.maxDistance = 50;\n        controls.minDistance = 0.25;\n        controls.addEventListener('change', () => this.recenter());\n\n        this.scene = scene;\n        this.world = world;\n        this.renderer = renderer;\n        this.camera = camera;\n        this.controls = controls;\n        this.plane = plane;\n        this.directionalLight = dirLight;\n        this.ambientLight = ambientLight;\n\n        this._setUp(this.up);\n\n        this._collisionMaterial = new MeshPhongMaterial({\n            transparent: true,\n            opacity: 0.35,\n            shininess: 2.5,\n            premultipliedAlpha: true,\n            color: 0xffbe38,\n            polygonOffset: true,\n            polygonOffsetFactor: -1,\n            polygonOffsetUnits: -1,\n        });\n\n        const _renderLoop = () => {\n\n            if (this.parentNode) {\n\n                this.updateSize();\n\n                if (this._dirty || this.autoRedraw) {\n\n                    if (!this.noAutoRecenter) {\n\n                        this._updateEnvironment();\n                    }\n\n                    this.renderer.render(scene, camera);\n                    this._dirty = false;\n\n                }\n\n                // update controls after the environment in\n                // case the controls are retargeted\n                this.controls.update();\n\n            }\n            this._renderLoopId = requestAnimationFrame(_renderLoop);\n\n        };\n        _renderLoop();\n\n    }\n\n    connectedCallback() {\n\n        // Add our initialize styles for the element if they haven't\n        // been added yet\n        if (!this.constructor._styletag) {\n\n            const styletag = document.createElement('style');\n            styletag.innerHTML =\n            `\n                ${ this.tagName } { display: block; }\n                ${ this.tagName } canvas {\n                    width: 100%;\n                    height: 100%;\n                }\n            `;\n            document.head.appendChild(styletag);\n            this.constructor._styletag = styletag;\n\n        }\n\n        // add the renderer\n        if (this.childElementCount === 0) {\n\n            this.appendChild(this.renderer.domElement);\n\n        }\n\n        this.updateSize();\n        requestAnimationFrame(() => this.updateSize());\n\n    }\n\n    disconnectedCallback() {\n\n        cancelAnimationFrame(this._renderLoopId);\n\n    }\n\n    attributeChangedCallback(attr, oldval, newval) {\n\n        this._updateCollisionVisibility();\n        if (!this.noAutoRecenter) {\n            this.recenter();\n        }\n\n        switch (attr) {\n\n            case 'package':\n            case 'urdf': {\n\n                this._scheduleLoad();\n                break;\n\n            }\n\n            case 'up': {\n\n                this._setUp(this.up);\n                break;\n\n            }\n\n            case 'ambient-color': {\n\n                this.ambientLight.color.set(this.ambientColor);\n                this.ambientLight.groundColor.set('#000').lerp(this.ambientLight.color, 0.5);\n                break;\n\n            }\n\n            case 'ignore-limits': {\n\n                this._setIgnoreLimits(this.ignoreLimits, true);\n                break;\n\n            }\n\n        }\n\n    }\n\n    /* Public API */\n    updateSize() {\n\n        const r = this.renderer;\n        const w = this.clientWidth;\n        const h = this.clientHeight;\n        const currSize = r.getSize(tempVec2);\n\n        if (currSize.width !== w || currSize.height !== h) {\n\n            this.recenter();\n\n        }\n\n        r.setPixelRatio(window.devicePixelRatio);\n        r.setSize(w, h, false);\n\n        this.camera.aspect = w / h;\n        this.camera.updateProjectionMatrix();\n\n    }\n\n    redraw() {\n\n        this._dirty = true;\n    }\n\n    recenter() {\n\n        this._updateEnvironment();\n        this.redraw();\n\n    }\n\n    // Set the joint with jointName to\n    // angle in degrees\n    setJointValue(jointName, ...values) {\n\n        if (!this.robot) return;\n        if (!this.robot.joints[jointName]) return;\n\n        if (this.robot.joints[jointName].setJointValue(...values)) {\n\n            this.redraw();\n            this.dispatchEvent(new CustomEvent('angle-change', { bubbles: true, cancelable: true, detail: jointName }));\n\n        }\n\n    }\n\n    setJointValues(values) {\n\n        for (const name in values) this.setJointValue(name, values[name]);\n\n    }\n\n    /* Private Functions */\n    // Updates the position of the plane to be at the\n    // lowest point below the robot and focuses the\n    // camera on the center of the scene\n    _updateEnvironment() {\n\n        const robot = this.robot;\n        if (!robot) return;\n\n        this.world.updateMatrixWorld();\n\n        const bbox = new THREE.Box3();\n        bbox.makeEmpty();\n        robot.traverse(c => {\n            if (c.isURDFVisual) {\n                bbox.expandByObject(c);\n            }\n        });\n\n        const center = bbox.getCenter(new THREE.Vector3());\n        this.controls.target.y = center.y;\n        this.plane.position.y = bbox.min.y - 1e-3;\n\n        const dirLight = this.directionalLight;\n        dirLight.castShadow = this.displayShadow;\n\n        if (this.displayShadow) {\n\n            // Update the shadow camera rendering bounds to encapsulate the\n            // model. We use the bounding sphere of the bounding box for\n            // simplicity -- this could be a tighter fit.\n            const sphere = bbox.getBoundingSphere(new THREE.Sphere());\n            const minmax = sphere.radius;\n            const cam = dirLight.shadow.camera;\n            cam.left = cam.bottom = -minmax;\n            cam.right = cam.top = minmax;\n\n            // Update the camera to focus on the center of the model so the\n            // shadow can encapsulate it\n            const offset = dirLight.position.clone().sub(dirLight.target.position);\n            dirLight.target.position.copy(center);\n            dirLight.position.copy(center).add(offset);\n\n            cam.updateProjectionMatrix();\n\n        }\n\n    }\n\n    _scheduleLoad() {\n\n        // if our current model is already what's being requested\n        // or has been loaded then early out\n        if (this._prevload === `${ this.package }|${ this.urdf }`) return;\n        this._prevload = `${ this.package }|${ this.urdf }`;\n\n        // if we're already waiting on a load then early out\n        if (this._loadScheduled) return;\n        this._loadScheduled = true;\n\n        if (this.robot) {\n\n            this.robot.traverse(c => c.dispose && c.dispose());\n            this.robot.parent.remove(this.robot);\n            this.robot = null;\n\n        }\n\n        requestAnimationFrame(() => {\n\n            this._loadUrdf(this.package, this.urdf);\n            this._loadScheduled = false;\n\n        });\n\n    }\n\n    // Watch the package and urdf field and load the robot model.\n    // This should _only_ be called from _scheduleLoad because that\n    // ensures the that current robot has been removed\n    _loadUrdf(pkg, urdf) {\n\n        this.dispatchEvent(new CustomEvent('urdf-change', { bubbles: true, cancelable: true, composed: true }));\n\n        if (urdf) {\n\n            // Keep track of this request and make\n            // sure it doesn't get overwritten by\n            // a subsequent one\n            this._requestId++;\n            const requestId = this._requestId;\n\n            const updateMaterials = mesh => {\n\n                mesh.traverse(c => {\n\n                    if (c.isMesh) {\n\n                        c.castShadow = true;\n                        c.receiveShadow = true;\n\n                        if (c.material) {\n\n                            const mats =\n                                (Array.isArray(c.material) ? c.material : [c.material])\n                                    .map(m => {\n\n                                        if (m instanceof THREE.MeshBasicMaterial) {\n\n                                            m = new THREE.MeshPhongMaterial();\n\n                                        }\n\n                                        if (m.map) {\n\n                                            m.map.colorSpace = THREE.SRGBColorSpace;\n\n                                        }\n\n                                        return m;\n\n                                    });\n                            c.material = mats.length === 1 ? mats[0] : mats;\n\n                        }\n\n                    }\n\n                });\n\n            };\n\n            if (pkg.includes(':') && (pkg.split(':')[1].substring(0, 2)) !== '//') {\n                // E.g. pkg = \"pkg_name: path/to/pkg_name, pk2: path2/to/pk2\"}\n\n                // Convert pkg(s) into a map. E.g.\n                // { \"pkg_name\": \"path/to/pkg_name\",\n                //   \"pk2\":      \"path2/to/pk2\"      }\n\n                pkg = pkg.split(',').reduce((map, value) => {\n\n                    const split = value.split(/:/).filter(x => !!x);\n                    const pkgName = split.shift().trim();\n                    const pkgPath = split.join(':').trim();\n                    map[pkgName] = pkgPath;\n\n                    return map;\n\n                }, {});\n            }\n\n            let robot = null;\n            const manager = new THREE.LoadingManager();\n            manager.onLoad = () => {\n\n                // If another request has come in to load a new\n                // robot, then ignore this one\n                if (this._requestId !== requestId) {\n\n                    robot.traverse(c => c.dispose && c.dispose());\n                    return;\n\n                }\n\n                this.robot = robot;\n                this.world.add(robot);\n                updateMaterials(robot);\n\n                this._setIgnoreLimits(this.ignoreLimits);\n                this._updateCollisionVisibility();\n\n                this.dispatchEvent(new CustomEvent('urdf-processed', { bubbles: true, cancelable: true, composed: true }));\n                this.dispatchEvent(new CustomEvent('geometry-loaded', { bubbles: true, cancelable: true, composed: true }));\n\n                this.recenter();\n\n            };\n\n            if (this.urlModifierFunc) {\n\n                manager.setURLModifier(this.urlModifierFunc);\n\n            }\n\n            const loader = new URDFLoader(manager);\n            loader.packages = pkg;\n            loader.loadMeshCb = this.loadMeshFunc;\n            loader.fetchOptions = { mode: 'cors', credentials: 'same-origin' };\n            loader.parseCollision = true;\n            loader.load(urdf, model => robot = model);\n\n        }\n\n    }\n\n    _updateCollisionVisibility() {\n\n        const showCollision = this.showCollision;\n        const collisionMaterial = this._collisionMaterial;\n        const robot = this.robot;\n\n        if (robot === null) return;\n\n        const colliders = [];\n        robot.traverse(c => {\n\n            if (c.isURDFCollider) {\n\n                c.visible = showCollision;\n                colliders.push(c);\n\n            }\n\n        });\n\n        colliders.forEach(coll => {\n\n            coll.traverse(c => {\n\n                if (c.isMesh) {\n\n                    c.raycast = emptyRaycast;\n                    c.material = collisionMaterial;\n                    c.castShadow = false;\n\n                }\n\n            });\n\n        });\n\n    }\n\n    // Watch the coordinate frame and update the\n    // rotation of the scene to match\n    _setUp(up) {\n\n        if (!up) up = '+Z';\n        up = up.toUpperCase();\n        const sign = up.replace(/[^-+]/g, '')[0] || '+';\n        const axis = up.replace(/[^XYZ]/gi, '')[0] || 'Z';\n\n        const PI = Math.PI;\n        const HALFPI = PI / 2;\n        if (axis === 'X') this.world.rotation.set(0, 0, sign === '+' ? HALFPI : -HALFPI);\n        if (axis === 'Z') this.world.rotation.set(sign === '+' ? -HALFPI : HALFPI, 0, 0);\n        if (axis === 'Y') this.world.rotation.set(sign === '+' ? 0 : PI, 0, 0);\n\n    }\n\n    // Updates the current robot's angles to ignore\n    // joint limits or not\n    _setIgnoreLimits(ignore, dispatch = false) {\n\n        if (this.robot) {\n\n            Object\n                .values(this.robot.joints)\n                .forEach(joint => {\n\n                    joint.ignoreLimits = ignore;\n                    joint.setJointValue(...joint.jointValue);\n\n                });\n\n        }\n\n        if (dispatch) {\n\n            this.dispatchEvent(new CustomEvent('ignore-limits-change', { bubbles: true, cancelable: true, composed: true }));\n\n        }\n\n    }\n\n};\n"],"names":["THREE","OrbitControls","MeshPhongMaterial"],"mappings":"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"}