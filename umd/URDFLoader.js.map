{"version":3,"file":"URDFLoader.js","sources":["../src/URDFClasses.js","../src/URDFLoader.js"],"sourcesContent":["import { Euler, Object3D, Vector3, Quaternion, Matrix4 } from 'three';\n\nconst _tempAxis = new Vector3();\nconst _tempEuler = new Euler();\nconst _tempTransform = new Matrix4();\nconst _tempOrigTransform = new Matrix4();\nconst _tempQuat = new Quaternion();\nconst _tempScale = new Vector3(1.0, 1.0, 1.0);\nconst _tempPosition = new Vector3();\n\nclass URDFBase extends Object3D {\n\n    constructor(...args) {\n\n        super(...args);\n        this.urdfNode = null;\n        this.urdfName = '';\n\n    }\n\n    copy(source, recursive) {\n\n        super.copy(source, recursive);\n\n        this.urdfNode = source.urdfNode;\n        this.urdfName = source.urdfName;\n\n        return this;\n\n    }\n\n}\n\nclass URDFCollider extends URDFBase {\n\n    constructor(...args) {\n\n        super(...args);\n        this.isURDFCollider = true;\n        this.type = 'URDFCollider';\n\n    }\n\n}\n\nclass URDFVisual extends URDFBase {\n\n    constructor(...args) {\n\n        super(...args);\n        this.isURDFVisual = true;\n        this.type = 'URDFVisual';\n\n    }\n\n}\n\nclass URDFLink extends URDFBase {\n\n    constructor(...args) {\n\n        super(...args);\n        this.isURDFLink = true;\n        this.type = 'URDFLink';\n\n    }\n\n}\n\nclass URDFJoint extends URDFBase {\n\n    get jointType() {\n\n        return this._jointType;\n\n    }\n\n    set jointType(v) {\n\n        if (this.jointType === v) return;\n        this._jointType = v;\n        this.matrixWorldNeedsUpdate = true;\n        switch (v) {\n\n            case 'fixed':\n                this.jointValue = [];\n                break;\n\n            case 'continuous':\n            case 'revolute':\n            case 'prismatic':\n                this.jointValue = new Array(1).fill(0);\n                break;\n\n            case 'planar':\n                // Planar joints are, 3dof: position XY and rotation Z.\n                this.jointValue = new Array(3).fill(0);\n                this.axis = new Vector3(0, 0, 1);\n                break;\n\n            case 'floating':\n                this.jointValue = new Array(6).fill(0);\n                break;\n\n        }\n\n    }\n\n    get angle() {\n\n        return this.jointValue[0];\n\n    }\n\n    constructor(...args) {\n\n        super(...args);\n\n        this.isURDFJoint = true;\n        this.type = 'URDFJoint';\n\n        this.jointValue = null;\n        this.jointType = 'fixed';\n        this.axis = new Vector3(1, 0, 0);\n        this.limit = { lower: 0, upper: 0 };\n        this.ignoreLimits = false;\n\n        this.origPosition = null;\n        this.origQuaternion = null;\n\n        this.mimicJoints = [];\n\n    }\n\n    /* Overrides */\n    copy(source, recursive) {\n\n        super.copy(source, recursive);\n\n        this.jointType = source.jointType;\n        this.axis = source.axis.clone();\n        this.limit.lower = source.limit.lower;\n        this.limit.upper = source.limit.upper;\n        this.ignoreLimits = false;\n\n        this.jointValue = [...source.jointValue];\n\n        this.origPosition = source.origPosition ? source.origPosition.clone() : null;\n        this.origQuaternion = source.origQuaternion ? source.origQuaternion.clone() : null;\n\n        this.mimicJoints = [...source.mimicJoints];\n\n        return this;\n\n    }\n\n    /* Public Functions */\n    /**\n     * @param {...number|null} values The joint value components to set, optionally null for no-op\n     * @returns {boolean} Whether the invocation of this function resulted in an actual change to the joint value\n     */\n    setJointValue(...values) {\n\n        // Parse all incoming values into numbers except null, which we treat as a no-op for that value component.\n        values = values.map(v => v === null ? null : parseFloat(v));\n\n        if (!this.origPosition || !this.origQuaternion) {\n\n            this.origPosition = this.position.clone();\n            this.origQuaternion = this.quaternion.clone();\n\n        }\n\n        let didUpdate = false;\n\n        this.mimicJoints.forEach(joint => {\n\n            didUpdate = joint.updateFromMimickedJoint(...values) || didUpdate;\n\n        });\n\n        switch (this.jointType) {\n\n            case 'fixed': {\n\n                return didUpdate;\n\n            }\n            case 'continuous':\n            case 'revolute': {\n\n                let angle = values[0];\n                if (angle == null) return didUpdate;\n                if (angle === this.jointValue[0]) return didUpdate;\n\n                if (!this.ignoreLimits && this.jointType === 'revolute') {\n\n                    angle = Math.min(this.limit.upper, angle);\n                    angle = Math.max(this.limit.lower, angle);\n\n                }\n\n                this.quaternion\n                    .setFromAxisAngle(this.axis, angle)\n                    .premultiply(this.origQuaternion);\n\n                if (this.jointValue[0] !== angle) {\n\n                    this.jointValue[0] = angle;\n                    this.matrixWorldNeedsUpdate = true;\n                    return true;\n\n                } else {\n\n                    return didUpdate;\n\n                }\n\n            }\n\n            case 'prismatic': {\n\n                let pos = values[0];\n                if (pos == null) return didUpdate;\n                if (pos === this.jointValue[0]) return didUpdate;\n\n                if (!this.ignoreLimits) {\n\n                    pos = Math.min(this.limit.upper, pos);\n                    pos = Math.max(this.limit.lower, pos);\n\n                }\n\n                this.position.copy(this.origPosition);\n                _tempAxis.copy(this.axis).applyEuler(this.rotation);\n                this.position.addScaledVector(_tempAxis, pos);\n\n                if (this.jointValue[0] !== pos) {\n\n                    this.jointValue[0] = pos;\n                    this.matrixWorldNeedsUpdate = true;\n                    return true;\n\n                } else {\n\n                    return didUpdate;\n\n                }\n\n            }\n\n            case 'floating': {\n\n                // no-op if all values are identical to existing value or are null\n                if (this.jointValue.every((value, index) => values[index] === value || values[index] === null)) return didUpdate;\n                // Floating joints have six degrees of freedom: X, Y, Z, R, P, Y.\n                this.jointValue[0] = values[0] !== null ? values[0] : this.jointValue[0];\n                this.jointValue[1] = values[1] !== null ? values[1] : this.jointValue[1];\n                this.jointValue[2] = values[2] !== null ? values[2] : this.jointValue[2];\n                this.jointValue[3] = values[3] !== null ? values[3] : this.jointValue[3];\n                this.jointValue[4] = values[4] !== null ? values[4] : this.jointValue[4];\n                this.jointValue[5] = values[5] !== null ? values[5] : this.jointValue[5];\n\n                // Compose transform of joint origin and transform due to joint values\n                _tempOrigTransform.compose(this.origPosition, this.origQuaternion, _tempScale);\n                _tempQuat.setFromEuler(\n                    _tempEuler.set(\n                        this.jointValue[3],\n                        this.jointValue[4],\n                        this.jointValue[5],\n                        'XYZ',\n                    ),\n                );\n                _tempPosition.set(this.jointValue[0], this.jointValue[1], this.jointValue[2]);\n                _tempTransform.compose(_tempPosition, _tempQuat, _tempScale);\n\n                // Calcualte new transform\n                _tempOrigTransform.premultiply(_tempTransform);\n                this.position.setFromMatrixPosition(_tempOrigTransform);\n                this.rotation.setFromRotationMatrix(_tempOrigTransform);\n\n                this.matrixWorldNeedsUpdate = true;\n                return true;\n            }\n\n            case 'planar': {\n\n                // no-op if all values are identical to existing value or are null\n                if (this.jointValue.every((value, index) => values[index] === value || values[index] === null)) return didUpdate;\n\n                this.jointValue[0] = values[0] !== null ? values[0] : this.jointValue[0];\n                this.jointValue[1] = values[1] !== null ? values[1] : this.jointValue[1];\n                this.jointValue[2] = values[2] !== null ? values[2] : this.jointValue[2];\n\n                // Compose transform of joint origin and transform due to joint values\n                _tempOrigTransform.compose(this.origPosition, this.origQuaternion, _tempScale);\n                _tempQuat.setFromAxisAngle(this.axis, this.jointValue[2]);\n                _tempPosition.set(this.jointValue[0], this.jointValue[1], 0.0);\n                _tempTransform.compose(_tempPosition, _tempQuat, _tempScale);\n\n                // Calculate new transform\n                _tempOrigTransform.premultiply(_tempTransform);\n                this.position.setFromMatrixPosition(_tempOrigTransform);\n                this.rotation.setFromRotationMatrix(_tempOrigTransform);\n\n                this.matrixWorldNeedsUpdate = true;\n                return true;\n            }\n\n        }\n\n        return didUpdate;\n\n    }\n\n}\n\nclass URDFMimicJoint extends URDFJoint {\n\n    constructor(...args) {\n\n        super(...args);\n        this.type = 'URDFMimicJoint';\n        this.mimicJoint = null;\n        this.offset = 0;\n        this.multiplier = 1;\n\n    }\n\n    updateFromMimickedJoint(...values) {\n\n        const modifiedValues = values.map(x => x * this.multiplier + this.offset);\n        return super.setJointValue(...modifiedValues);\n\n    }\n\n    /* Overrides */\n    copy(source, recursive) {\n\n        super.copy(source, recursive);\n\n        this.mimicJoint = source.mimicJoint;\n        this.offset = source.offset;\n        this.multiplier = source.multiplier;\n\n        return this;\n\n    }\n\n}\n\nclass URDFRobot extends URDFLink {\n\n    constructor(...args) {\n\n        super(...args);\n        this.isURDFRobot = true;\n        this.urdfNode = null;\n\n        this.urdfRobotNode = null;\n        this.robotName = null;\n\n        this.links = null;\n        this.joints = null;\n        this.colliders = null;\n        this.visual = null;\n        this.frames = null;\n\n    }\n\n    copy(source, recursive) {\n\n        super.copy(source, recursive);\n\n        this.urdfRobotNode = source.urdfRobotNode;\n        this.robotName = source.robotName;\n\n        this.links = {};\n        this.joints = {};\n        this.colliders = {};\n        this.visual = {};\n\n        this.traverse(c => {\n\n            if (c.isURDFJoint && c.urdfName in source.joints) {\n\n                this.joints[c.urdfName] = c;\n\n            }\n\n            if (c.isURDFLink && c.urdfName in source.links) {\n\n                this.links[c.urdfName] = c;\n\n            }\n\n            if (c.isURDFCollider && c.urdfName in source.colliders) {\n\n                this.colliders[c.urdfName] = c;\n\n            }\n\n            if (c.isURDFVisual && c.urdfName in source.visual) {\n\n                this.visual[c.urdfName] = c;\n\n            }\n\n        });\n\n        // Repair mimic joint references once we've re-accumulated all our joint data\n        for (const joint in this.joints) {\n            this.joints[joint].mimicJoints = this.joints[joint].mimicJoints.map((mimicJoint) => this.joints[mimicJoint.name]);\n        }\n\n        this.frames = {\n            ...this.colliders,\n            ...this.visual,\n            ...this.links,\n            ...this.joints,\n        };\n\n        return this;\n\n    }\n\n    getFrame(name) {\n\n        return this.frames[name];\n\n    }\n\n    setJointValue(jointName, ...angle) {\n\n        const joint = this.joints[jointName];\n        if (joint) {\n\n            return joint.setJointValue(...angle);\n\n        }\n\n        return false;\n    }\n\n    setJointValues(values) {\n\n        let didChange = false;\n        for (const name in values) {\n\n            const value = values[name];\n            if (Array.isArray(value)) {\n\n                didChange = this.setJointValue(name, ...value) || didChange;\n\n            } else {\n\n                didChange = this.setJointValue(name, value) || didChange;\n\n            }\n\n        }\n\n        return didChange;\n\n    }\n\n}\n\nexport { URDFRobot, URDFLink, URDFJoint, URDFMimicJoint, URDFVisual, URDFCollider };\n","import * as THREE from 'three';\nimport { STLLoader } from 'three/examples/jsm/loaders/STLLoader.js';\nimport { ColladaLoader } from 'three/examples/jsm/loaders/ColladaLoader.js';\nimport { URDFRobot, URDFJoint, URDFLink, URDFCollider, URDFVisual, URDFMimicJoint } from './URDFClasses.js';\n\n/*\nReference coordinate frames for THREE.js and ROS.\nBoth coordinate systems are right handed so the URDF is instantiated without\nframe transforms. The resulting model can be rotated to rectify the proper up,\nright, and forward directions\n\nTHREE.js\n   Y\n   |\n   |\n   .-----X\n ／\nZ\n\nROS URDf\n       Z\n       |   X\n       | ／\n Y-----.\n\n*/\n\nconst tempQuaternion = new THREE.Quaternion();\nconst tempEuler = new THREE.Euler();\n\n// take a vector \"x y z\" and process it into\n// an array [x, y, z]\nfunction processTuple(val) {\n\n    if (!val) return [0, 0, 0];\n    return val.trim().split(/\\s+/g).map(num => parseFloat(num));\n\n}\n\n// applies a rotation a threejs object in URDF order\nfunction applyRotation(obj, rpy, additive = false) {\n\n    // if additive is true the rotation is applied in\n    // addition to the existing rotation\n    if (!additive) obj.rotation.set(0, 0, 0);\n\n    tempEuler.set(rpy[0], rpy[1], rpy[2], 'ZYX');\n    tempQuaternion.setFromEuler(tempEuler);\n    tempQuaternion.multiply(obj.quaternion);\n    obj.quaternion.copy(tempQuaternion);\n\n}\n\n/* URDFLoader Class */\n// Loads and reads a URDF file into a THREEjs Object3D format\nexport default\nclass URDFLoader {\n\n    constructor(manager) {\n\n        this.manager = manager || THREE.DefaultLoadingManager;\n        this.loadMeshCb = this.defaultMeshLoader.bind(this);\n        this.parseVisual = true;\n        this.parseCollision = false;\n        this.packages = '';\n        this.workingPath = '';\n        this.fetchOptions = {};\n\n        // 添加钩子\n        this.robotHook = (robotNodes, linkMap, jointMap, curRobotObject3D) => {}\n        this.jointHook = (curJointChildNode, curJointObject3D) => {}\n        this.linkHook = (curLinkChildNode, curLinkObject3D) => {}\n        this.linkVisualHook = (curLinkVisualNode, curLinkVisualObject3D) => {}\n        this.linkCollisionHook = (curLinkCollisionNode, curLinkCollisionObject3D) => {}\n\n    }\n\n    /* Public API */\n    loadAsync(urdf) {\n\n        return new Promise((resolve, reject) => {\n\n            this.load(urdf, resolve, null, reject);\n\n        });\n\n    }\n\n    // urdf:    The path to the URDF within the package OR absolute\n    // onComplete:      Callback that is passed the model once loaded\n    load(urdf, onComplete, onProgress, onError) {\n\n        // Check if a full URI is specified before\n        // prepending the package info\n        const manager = this.manager;\n        const workingPath = THREE.LoaderUtils.extractUrlBase(urdf);\n        const urdfPath = this.manager.resolveURL(urdf);\n\n        manager.itemStart(urdfPath);\n\n        fetch(urdfPath, this.fetchOptions)\n            .then(res => {\n\n                if (res.ok) {\n\n                    if (onProgress) {\n\n                        onProgress(null);\n\n                    }\n                    return res.text();\n\n                } else {\n\n                    throw new Error(`URDFLoader: Failed to load url '${ urdfPath }' with error code ${ res.status } : ${ res.statusText }.`);\n\n                }\n\n            })\n            .then(data => {\n\n                if (this.workingPath === '') {\n\n                    this.workingPath = workingPath;\n\n                }\n\n                const model = this.parse(data);\n                onComplete(model);\n                manager.itemEnd(urdfPath);\n\n            })\n            .catch(e => {\n\n                if (onError) {\n\n                    onError(e);\n\n                } else {\n\n                    console.error('URDFLoader: Error loading file.', e);\n\n                }\n                manager.itemError(urdfPath);\n                manager.itemEnd(urdfPath);\n\n            });\n\n    }\n\n    parse(content) {\n\n        const packages = this.packages;\n        const loadMeshCb = this.loadMeshCb;\n        const parseVisual = this.parseVisual;\n        const parseCollision = this.parseCollision;\n        const workingPath = this.workingPath;\n        const manager = this.manager;\n        const linkMap = {};\n        const jointMap = {};\n        const materialMap = {};\n\n        // 钩子\n        const robotHook = this.robotHook\n        const jointHook = this.jointHook\n        const linkHook = this.linkHook\n        const linkVisualHook = this.linkVisualHook\n        const linkCollisionHook = this.linkCollisionHook\n\n        // Resolves the path of mesh files\n        function resolvePath(path) {\n\n            if (!/^package:\\/\\//.test(path)) {\n\n                return workingPath ? workingPath + path : path;\n\n            }\n\n            // Remove \"package://\" keyword and split meshPath at the first slash\n            const [targetPkg, relPath] = path.replace(/^package:\\/\\//, '').split(/\\/(.+)/);\n\n            if (typeof packages === 'string') {\n\n                // \"pkg\" is one single package\n                if (packages.endsWith(targetPkg)) {\n\n                    // \"pkg\" is the target package\n                    return packages + '/' + relPath;\n\n                } else {\n\n                    // Assume \"pkg\" is the target package's parent directory\n                    return packages + '/' + targetPkg + '/' + relPath;\n\n                }\n\n            } else if (packages instanceof Function) {\n\n                return packages(targetPkg) + '/' + relPath;\n\n            } else if (typeof packages === 'object') {\n\n                // \"pkg\" is a map of packages\n                if (targetPkg in packages) {\n\n                    return packages[targetPkg] + '/' + relPath;\n\n                } else {\n\n                    console.error(`URDFLoader : ${ targetPkg } not found in provided package list.`);\n                    return null;\n\n                }\n\n            }\n\n        }\n\n        // Process the URDF text format\n        function processUrdf(data) {\n\n            let children;\n            if (data instanceof Document) {\n\n                children = [ ...data.children ];\n\n            } else if (data instanceof Element) {\n\n                children = [ data ];\n\n            } else {\n\n                const parser = new DOMParser();\n                const urdf = parser.parseFromString(data, 'text/xml');\n                children = [ ...urdf.children ];\n\n            }\n\n            const robotNode = children.filter(c => c.nodeName === 'robot').pop();\n            return processRobot(robotNode);\n\n        }\n\n        // Process the <robot> node\n        function processRobot(robot) {\n\n            const robotNodes = [ ...robot.children ];\n            const links = robotNodes.filter(c => c.nodeName.toLowerCase() === 'link');\n            const joints = robotNodes.filter(c => c.nodeName.toLowerCase() === 'joint');\n            const materials = robotNodes.filter(c => c.nodeName.toLowerCase() === 'material');\n            const obj = new URDFRobot();\n\n            obj.robotName = robot.getAttribute('name');\n            obj.urdfRobotNode = robot;\n\n            // Create the <material> map\n            materials.forEach(m => {\n\n                const name = m.getAttribute('name');\n                materialMap[name] = processMaterial(m);\n\n            });\n\n            // Create the <link> map\n            const visualMap = {};\n            const colliderMap = {};\n            links.forEach(l => {\n                const name = l.getAttribute('name');\n                const isRoot = robot.querySelector(`child[link=\"${ name }\"]`) === null;\n                linkMap[name] = processLink(l, visualMap, colliderMap, isRoot ? obj : null);\n\n            });\n\n            // Create the <joint> map\n            joints.forEach(j => {\n\n                const name = j.getAttribute('name');\n                jointMap[name] = processJoint(j);\n\n            });\n\n            /*** #新增# ***/\n            if (robotHook) robotHook(robotNodes, linkMap, jointMap, obj)\n            /*** #新增# ***/\n\n\n            obj.joints = jointMap;\n            obj.links = linkMap;\n            obj.colliders = colliderMap;\n            obj.visual = visualMap;\n\n            // Link up mimic joints\n            const jointList = Object.values(jointMap);\n            jointList.forEach(j => {\n\n                if (j instanceof URDFMimicJoint) {\n\n                    jointMap[j.mimicJoint].mimicJoints.push(j);\n\n                }\n\n            });\n\n            // Detect infinite loops of mimic joints\n            jointList.forEach(j => {\n\n                const uniqueJoints = new Set();\n                const iterFunction = joint => {\n\n                    if (uniqueJoints.has(joint)) {\n\n                        throw new Error('URDFLoader: Detected an infinite loop of mimic joints.');\n\n                    }\n\n                    uniqueJoints.add(joint);\n                    joint.mimicJoints.forEach(j => {\n\n                        iterFunction(j);\n\n                    });\n\n                };\n\n                iterFunction(j);\n            });\n\n            obj.frames = {\n                ...colliderMap,\n                ...visualMap,\n                ...linkMap,\n                ...jointMap,\n            };\n\n            return obj;\n\n        }\n\n        // Process joint nodes and parent them\n        function processJoint(joint) {\n\n            const children = [ ...joint.children ];\n            const jointType = joint.getAttribute('type');\n\n            let obj;\n\n            const mimicTag = children.find(n => n.nodeName.toLowerCase() === 'mimic');\n            if (mimicTag) {\n\n                obj = new URDFMimicJoint();\n                obj.mimicJoint = mimicTag.getAttribute('joint');\n                obj.multiplier = parseFloat(mimicTag.getAttribute('multiplier') || 1.0);\n                obj.offset = parseFloat(mimicTag.getAttribute('offset') || 0.0);\n\n            } else {\n\n                obj = new URDFJoint();\n\n            }\n\n            obj.urdfNode = joint;\n            obj.name = joint.getAttribute('name');\n            obj.urdfName = obj.name;\n            obj.jointType = jointType;\n\n            let parent = null;\n            let child = null;\n            let xyz = [0, 0, 0];\n            let rpy = [0, 0, 0];\n\n            // Extract the attributes\n            children.forEach(n => {\n\n                const type = n.nodeName.toLowerCase();\n                if (type === 'origin') {\n\n                    xyz = processTuple(n.getAttribute('xyz'));\n                    rpy = processTuple(n.getAttribute('rpy'));\n\n                } else if (type === 'child') {\n\n                    child = linkMap[n.getAttribute('link')];\n\n                } else if (type === 'parent') {\n\n                    parent = linkMap[n.getAttribute('link')];\n\n                } else if (type === 'limit') {\n\n                    obj.limit.lower = parseFloat(n.getAttribute('lower') || obj.limit.lower);\n                    obj.limit.upper = parseFloat(n.getAttribute('upper') || obj.limit.upper);\n\n                }\n                /*** #新增# ***/\n                if (jointHook) jointHook(n, obj)\n                /*** #新增# ***/\n\n            });\n\n            // Join the links\n            parent.add(obj);\n            obj.add(child);\n            applyRotation(obj, rpy);\n            obj.position.set(xyz[0], xyz[1], xyz[2]);\n\n            // Set up the rotate function\n            const axisNode = children.filter(n => n.nodeName.toLowerCase() === 'axis')[0];\n\n            if (axisNode) {\n\n                const axisXYZ = axisNode.getAttribute('xyz').split(/\\s+/g).map(num => parseFloat(num));\n                obj.axis = new THREE.Vector3(axisXYZ[0], axisXYZ[1], axisXYZ[2]);\n                obj.axis.normalize();\n\n            }\n\n            \n\n            return obj;\n\n        }\n\n        // Process the <link> nodes\n        function processLink(link, visualMap, colliderMap, target = null) {\n            if (target === null) {\n\n                target = new URDFLink();\n\n            }\n\n            const children = [ ...link.children ];\n            target.name = link.getAttribute('name');\n            target.urdfName = target.name;\n            target.urdfNode = link;\n\n            /*** #新增# ***/\n            if (linkHook) linkHook(link, target)\n            /*** #新增# ***/\n\n            if (parseVisual) {\n\n                const visualNodes = children.filter(n => n.nodeName.toLowerCase() === 'visual');\n                visualNodes.forEach(vn => {\n\n                    const v = processLinkElement(vn, materialMap);\n                    target.add(v);\n\n                    /*** #新增# ***/\n                    if (linkVisualHook) linkVisualHook(vn, v)\n                    /*** #新增# ***/\n\n                    if (vn.hasAttribute('name')) {\n\n                        const name = vn.getAttribute('name');\n                        v.name = name;\n                        v.urdfName = name;\n                        visualMap[name] = v;\n\n                    }\n\n                });\n\n            }\n\n            if (parseCollision) {\n\n                const collisionNodes = children.filter(n => n.nodeName.toLowerCase() === 'collision');\n                collisionNodes.forEach(cn => {\n\n                    const c = processLinkElement(cn);\n                    target.add(c);\n\n                    /*** #新增# ***/\n                    if (linkCollisionHook) linkCollisionHook(cn, c)\n                    /*** #新增# ***/\n\n                    if (cn.hasAttribute('name')) {\n\n                        const name = cn.getAttribute('name');\n                        c.name = name;\n                        c.urdfName = name;\n                        colliderMap[name] = c;\n\n                    }\n\n                });\n\n            }\n\n            return target;\n\n        }\n\n        function processMaterial(node) {\n\n            const matNodes = [ ...node.children ];\n            const material = new THREE.MeshPhongMaterial();\n\n            material.name = node.getAttribute('name') || '';\n            matNodes.forEach(n => {\n\n                const type = n.nodeName.toLowerCase();\n                if (type === 'color') {\n\n                    const rgba =\n                        n\n                            .getAttribute('rgba')\n                            .split(/\\s/g)\n                            .map(v => parseFloat(v));\n\n                    material.color.setRGB(rgba[0], rgba[1], rgba[2]);\n                    material.opacity = rgba[3];\n                    material.transparent = rgba[3] < 1;\n                    material.depthWrite = !material.transparent;\n\n                } else if (type === 'texture') {\n\n                    // The URDF spec does not require that the <texture/> tag include\n                    // a filename attribute so skip loading the texture if not provided.\n                    const filename = n.getAttribute('filename');\n                    if (filename) {\n\n                        const loader = new THREE.TextureLoader(manager);\n                        const filePath = resolvePath(filename);\n                        material.map = loader.load(filePath);\n                        material.map.colorSpace = THREE.SRGBColorSpace;\n\n                    }\n\n                }\n            });\n\n            return material;\n\n        }\n\n        // Process the visual and collision nodes into meshes\n        function processLinkElement(vn, materialMap = {}) {\n\n            const isCollisionNode = vn.nodeName.toLowerCase() === 'collision';\n            const children = [ ...vn.children ];\n            let material = null;\n\n            // get the material first\n            const materialNode = children.filter(n => n.nodeName.toLowerCase() === 'material')[0];\n            if (materialNode) {\n\n                const name = materialNode.getAttribute('name');\n                if (name && name in materialMap) {\n\n                    material = materialMap[name];\n\n                } else {\n\n                    material = processMaterial(materialNode);\n\n                }\n\n            } else {\n\n                material = new THREE.MeshPhongMaterial();\n\n            }\n\n            const group = isCollisionNode ? new URDFCollider() : new URDFVisual();\n            group.urdfNode = vn;\n\n            children.forEach(n => {\n\n                const type = n.nodeName.toLowerCase();\n                if (type === 'geometry') {\n\n                    const geoType = n.children[0].nodeName.toLowerCase();\n                    if (geoType === 'mesh') {\n\n                        const filename = n.children[0].getAttribute('filename');\n                        const filePath = resolvePath(filename);\n\n                        // file path is null if a package directory is not provided.\n                        if (filePath !== null) {\n\n                            const scaleAttr = n.children[0].getAttribute('scale');\n                            if (scaleAttr) {\n\n                                const scale = processTuple(scaleAttr);\n                                group.scale.set(scale[0], scale[1], scale[2]);\n\n                            }\n\n                            loadMeshCb(filePath, manager, (obj, err) => {\n\n                                if (err) {\n\n                                    console.error('URDFLoader: Error loading mesh.', err);\n\n                                } else if (obj) {\n\n                                    if (obj instanceof THREE.Mesh) {\n\n                                        obj.material = material;\n\n                                    }\n\n                                    // We don't expect non identity rotations or positions. In the case of\n                                    // COLLADA files the model might come in with a custom scale for unit\n                                    // conversion.\n                                    obj.position.set(0, 0, 0);\n                                    obj.quaternion.identity();\n                                    group.add(obj);\n\n                                }\n\n                            });\n\n                        }\n\n                    } else if (geoType === 'box') {\n\n                        const primitiveModel = new THREE.Mesh();\n                        primitiveModel.geometry = new THREE.BoxGeometry(1, 1, 1);\n                        primitiveModel.material = material;\n\n                        const size = processTuple(n.children[0].getAttribute('size'));\n                        primitiveModel.scale.set(size[0], size[1], size[2]);\n\n                        group.add(primitiveModel);\n\n                    } else if (geoType === 'sphere') {\n\n                        const primitiveModel = new THREE.Mesh();\n                        primitiveModel.geometry = new THREE.SphereGeometry(1, 30, 30);\n                        primitiveModel.material = material;\n\n                        const radius = parseFloat(n.children[0].getAttribute('radius')) || 0;\n                        primitiveModel.scale.set(radius, radius, radius);\n\n                        group.add(primitiveModel);\n\n                    } else if (geoType === 'cylinder') {\n\n                        const primitiveModel = new THREE.Mesh();\n                        primitiveModel.geometry = new THREE.CylinderGeometry(1, 1, 1, 30);\n                        primitiveModel.material = material;\n\n                        const radius = parseFloat(n.children[0].getAttribute('radius')) || 0;\n                        const length = parseFloat(n.children[0].getAttribute('length')) || 0;\n                        primitiveModel.scale.set(radius, length, radius);\n                        primitiveModel.rotation.set(Math.PI / 2, 0, 0);\n\n                        group.add(primitiveModel);\n\n                    }\n\n                } else if (type === 'origin') {\n\n                    const xyz = processTuple(n.getAttribute('xyz'));\n                    const rpy = processTuple(n.getAttribute('rpy'));\n\n                    group.position.set(xyz[0], xyz[1], xyz[2]);\n                    group.rotation.set(0, 0, 0);\n                    applyRotation(group, rpy);\n\n                }\n\n            });\n\n            return group;\n\n        }\n\n        return processUrdf(content);\n\n    }\n\n    // Default mesh loading function\n    defaultMeshLoader(path, manager, done) {\n\n        if (/\\.stl$/i.test(path)) {\n\n            const loader = new STLLoader(manager);\n            loader.load(path, geom => {\n                const mesh = new THREE.Mesh(geom, new THREE.MeshPhongMaterial());\n                done(mesh);\n            });\n\n        } else if (/\\.dae$/i.test(path)) {\n\n            const loader = new ColladaLoader(manager);\n            loader.load(path, dae => done(dae.scene));\n\n        } else {\n\n            console.warn(`URDFLoader: Could not load model at ${ path }.\\nNo loader available`);\n\n        }\n\n    }\n\n};\n"],"names":["Vector3","Euler","Matrix4","Quaternion","Object3D","THREE","STLLoader","ColladaLoader"],"mappings":"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"}